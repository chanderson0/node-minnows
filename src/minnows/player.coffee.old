# Player

define (require) ->

  Reckoning = require('../reckoning/reckoning')
  util = require('../reckoning/util/util')
  paper = require('paper')

  class Player extends Reckoning.GameObject
    constructor: (@id, x, y, @rotation = 0, @display = false, @dest = null, @rad = 25, @color = 'white') ->
      @pos = new paper.Point x, y
      @vel = new paper.Point 0, 0

      if display
        circle = new paper.Path.Circle [x, y], @rad
        circle.strokeColor = @color
        line = new paper.Path.Line [x, y - @rad], [x, y]
        line.strokeColor = @color
        group = new paper.Group([circle, line])
        group.rotate @rotation + 90
        group.angle = @rotation

        @obj = group
      else
        @obj = null

    @duplicate: (other, visible = false) ->
      new Player(other.id, other.pos.x, other.pos.y, other.rotation, visible, other.dest, other.rad, other.color)

    clone: (@invalidate = true) ->
      if @invalidate and @obj?
        @obj.remove()
        @obj = null

      new Player(@id, @pos.x, @pos.y, @rotation, @display, @dest, @rad, @color)

    approach: (dt) ->
      from = new paper.Point @pos
      to = new paper.Point @dest
      dist = to.getDistance from, false
      dir = to.subtract from

      to_move = dir.normalize Math.sqrt(dist) * dt / 1000.0 * 40
      angle = to_move.getAngle()

      if to_move.length > 0.5
        if @obj?
          @obj.rotate angle - @obj.angle
          @obj.angle = angle
        @rotation = angle
      else
        to_move = to.subtract from
      
      @vel = to_move
    
    tick: (dt) ->
      if @dest?
        @approach dt

      if @obj?
        @obj.translate @vel

      @pos.__proto__ = paper.Point.prototype
      @pos = @pos.add @vel

    toJSON: @serialize
    serialize: () ->
      id: @id,
      pos: util.serializePt(@pos),
      rotation: @rotation,
      vel: util.serializePt(@vel),
      dest: if @dest then util.serializePt(@dest) else null
      display: @display
      rad: @rad
      color: @color

    @unserialize: (data) ->
      player = new Player data.id, data.pos.x, data.pos.y, data.rotation, data.display, data.dest, data.rad, data.color
      player.vel = new paper.Point data.vel
      return player

    snap: (pos, vel) ->
      @pos = new paper.Point pos
      @vel = new paper.Point vel

    leave: () ->
      if @obj
        @obj.remove()
